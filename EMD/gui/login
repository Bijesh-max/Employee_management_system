# gui/login.py
import tkinter as tk
from tkinter import messagebox
from auth.auth import Auth

class LoginScreen:
    def __init__(self, root, show_dashboard_callback):
        self.root = root
        self.root.title("Welcome - Login")
        self.root.configure(bg="#f0f0f0")

        # Validate callback
        if not callable(show_dashboard_callback):
            raise ValueError("show_dashboard_callback must be a callable function")

        window_width = 500
        window_height = 400
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")

        try:
            self.auth = Auth()  # Initialize Auth with try-except
        except Exception as e:
            messagebox.showerror("Initialization Error", f"Failed to initialize Auth: {e}")
            self.root.destroy()
            return

        self.show_dashboard_callback = show_dashboard_callback
        self.username_var = tk.StringVar()
        self.password_var = tk.StringVar()
        self.show_password_var = tk.BooleanVar(value=False)

        self.root.bind('<Return>', lambda event: self.login())
        self.root.bind('<Escape>', lambda event: self.on_exit())

        self.create_gui()

    def create_gui(self):
        # Use a frame for better layout control
        main_frame = tk.Frame(self.root, bg="#f0f0f0")
        main_frame.pack(expand=True)

        tk.Label(main_frame, text="Welcome", font=("Helvetica", 24, "bold"), bg="#f0f0f0").pack(pady=20)
        
        # Username section
        tk.Label(main_frame, text="Username:", font=("Arial", 14), bg="#f0f0f0").pack()
        tk.Entry(main_frame, textvariable=self.username_var, width=30, font=("Arial", 12)).pack(pady=5)
        
        # Password section
        tk.Label(main_frame, text="Password:", font=("Arial", 14), bg="#f0f0f0").pack()
        self.password_entry = tk.Entry(main_frame, textvariable=self.password_var, show="*", width=30, font=("Arial", 12))
        self.password_entry.pack(pady=5)
        
        # Show Password checkbox
        tk.Checkbutton(
            main_frame,
            text="Show Password",
            variable=self.show_password_var,
            command=self.toggle_password,
            font=("Arial", 10),
            bg="#f0f0f0"
        ).pack(pady=5)
        
        # Buttons
        button_frame = tk.Frame(main_frame, bg="#f0f0f0")
        button_frame.pack(pady=20)
        tk.Button(button_frame, text="Login", bg="#007FFF", font=("Arial", 14), width=15, command=self.login).pack(side=tk.LEFT, padx=10)
        tk.Button(button_frame, text="Exit", bg="red", fg="white", font=("Arial", 14), width=15, command=self.on_exit).pack(side=tk.LEFT, padx=10)

    def toggle_password(self):
        if self.password_entry.winfo_exists():  # Check if entry still exists
            if self.show_password_var.get():
                self.password_entry.config(show="")
            else:
                self.password_entry.config(show="*")

    def login(self):
        username = self.username_var.get().strip()
        password = self.password_var.get().strip()

        if not username or not password:
            messagebox.showerror("Error", "Username and password cannot be empty!")
            return

        try:
            if self.auth.validate_user(username, password):
                self.show_dashboard_callback()
            else:
                messagebox.showerror("Error", "Invalid username or password!")
        except Exception as e:
            messagebox.showerror("Error", f"Login failed: {e}")

    def on_exit(self):
        if messagebox.askyesno("Confirm Exit", "Are you sure you want to exit?"):
            self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    def dummy_dashboard():
        print("Dashboard shown")
        root.destroy()  # For testing, destroy root after showing dashboard
    app = LoginScreen(root, dummy_dashboard)
    root.mainloop()
