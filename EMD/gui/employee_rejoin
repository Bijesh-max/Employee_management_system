import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from database.db_operations import DatabaseOperations

class EmployeeRejoin:
    def __init__(self, root):
        self.root = root
        self.root.title("Employee Rejoin")

        # Set window size dynamically based on screen resolution
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        window_width = int(screen_width * 0.5)
        window_height = int(screen_height * 0.5)
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")

        self.root.configure(bg="#EEE8CD")
        self.db = DatabaseOperations()

        # Variables for form fields
        self.id_no_var = tk.StringVar()  # Changed from reg_no_var
        self.date_var = tk.StringVar(value=datetime.now().strftime("%d/%m/%Y"))
        self.name_var = tk.StringVar()
        self.machine_no_var = tk.StringVar()

        self.create_gui()

    def create_gui(self):
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)

        main_frame = tk.Frame(self.root, bg="#CDAA7D")
        main_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")

        main_frame.grid_rowconfigure(2, weight=1)
        main_frame.grid_columnconfigure(0, weight=1)
        main_frame.grid_columnconfigure(1, weight=1)

        header_frame = tk.Frame(main_frame, bg="#8B7355")
        header_frame.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(0, 10))
        tk.Label(
            header_frame,
            text="EMPLOYEE REJOIN",
            font=("Helvetica", 18, "bold"),
            fg="white",
            bg="#8B7355",
            pady=10
        ).grid(row=0, column=0, columnspan=2, sticky="ew")

        form_frame = tk.Frame(main_frame, bg="#CDAA7D")
        form_frame.grid(row=1, column=0, columnspan=2, pady=10)

        # ID No. and Search
        tk.Label(form_frame, text="ID NO.:", font=("Helvetica", 12, "bold"), fg="white", bg="#CDAA7D").grid(row=0, column=0, padx=10, pady=10, sticky="e")
        tk.Entry(form_frame, textvariable=self.id_no_var, width=15, font=("Helvetica", 12)).grid(row=0, column=1, padx=10, pady=10, sticky="w")
        tk.Button(form_frame, text="Search", command=self.search_employee, font=("Helvetica", 10), bg="#8B7355", fg="white").grid(row=0, column=2, padx=5)

        # Name (read-only)
        tk.Label(form_frame, text="NAME:", font=("Helvetica", 12, "bold"), fg="white", bg="#CDAA7D").grid(row=1, column=0, padx=10, pady=10, sticky="e")
        tk.Entry(form_frame, textvariable=self.name_var, width=40, font=("Helvetica", 12), state="readonly").grid(row=1, column=1, padx=10, pady=10, sticky="w")

        # Machine No. (read-only)
        tk.Label(form_frame, text="MACHINE NO.:", font=("Helvetica", 12, "bold"), fg="white", bg="#CDAA7D").grid(row=2, column=0, padx=10, pady=10, sticky="e")
        tk.Entry(form_frame, textvariable=self.machine_no_var, width=15, font=("Helvetica", 12), state="readonly").grid(row=2, column=1, padx=10, pady=10, sticky="w")

        # Date (manual entry)
        tk.Label(form_frame, text="REJOIN DATE (dd/mm/yyyy):", font=("Helvetica", 12, "bold"), fg="white", bg="#CDAA7D").grid(row=3, column=0, padx=10, pady=10, sticky="e")
        tk.Entry(form_frame, textvariable=self.date_var, width=15, font=("Helvetica", 12)).grid(row=3, column=1, padx=10, pady=10, sticky="w")

        button_frame = tk.Frame(main_frame, bg="#CDAA7D")
        button_frame.grid(row=2, column=0, columnspan=2, pady=20)

        button_config = {
            "font": ("Helvetica", 12, "bold"),
            "bg": "#8B7355",
            "fg": "white",
            "activebackground": "#333333",
            "activeforeground": "white",
            "borderwidth": 0,
            "padx": 10,
            "pady": 0
        }

        tk.Button(button_frame, text="SAVE", command=self.save_data, **button_config).grid(row=0, column=0, padx=10)
        tk.Button(button_frame, text="RESET", command=self.reset_form, **button_config).grid(row=0, column=1, padx=10)
        tk.Button(button_frame, text="EXIT", command=self.root.destroy, **button_config).grid(row=0, column=2, padx=10)

    def search_employee(self):
        id_no = self.id_no_var.get().strip()
        if not id_no:
            messagebox.showerror("Error", "Please enter an ID number!")
            return

        try:
            # New method needed in DatabaseOperations to fetch by id_no
            result = self.db.get_employee_details_by_id_no(id_no)  # Add this method to DatabaseOperations
            if result:
                self.name_var.set(result[0] or "N/A")  # Name
                self.machine_no_var.set(result[1] or "N/A")  # Machine No
            else:
                messagebox.showerror("Error", f"No employee found with ID number {id_no}!")
                self.name_var.set("")
                self.machine_no_var.set("")
        except Exception as e:
            messagebox.showerror("Error", f"Error fetching employee details: {e}")

    def convert_date_format(self, date_str):
        if not date_str:
            return None
        try:
            date_obj = datetime.strptime(date_str, "%d/%m/%Y")
            return date_obj.strftime("%Y-%m-%d")
        except ValueError:
            raise ValueError(f"Invalid date format: {date_str}. Please use dd/mm/yyyy")

    def save_data(self):
        if not self.id_no_var.get():
            messagebox.showerror("Error", "ID number is required!")
            return
        if not self.date_var.get():
            messagebox.showerror("Error", "Rejoin date is required!")
            return

        try:
            if not self.db.check_duplicate("id_no", self.id_no_var.get()):
                messagebox.showerror("Error", f"Employee with ID number {self.id_no_var.get()} does not exist!")
                return
            rejoin_date = self.convert_date_format(self.date_var.get())
            # Fetch registration_no based on id_no to use in insert_employee_rejoin
            with self.db.conn.cursor() as cursor:
                cursor.execute("SELECT registration_no FROM employees WHERE id_no = %s", (self.id_no_var.get(),))
                result = cursor.fetchone()
                if result:
                    registration_no = result[0]
                else:
                    raise ValueError("No registration number found for this ID!")
            self.db.insert_employee_rejoin(
                registration_no=registration_no,
                rejoin_date=rejoin_date
            )
            messagebox.showinfo("Success", "Rejoin data saved successfully!")
            self.reset_form()
        except Exception as e:
            messagebox.showerror("Error", f"Error saving data: {e}")

    def reset_form(self):
        self.id_no_var.set("")
        self.date_var.set(datetime.now().strftime("%d/%m/%Y"))
        self.name_var.set("")
        self.machine_no_var.set("")

if __name__ == "__main__":
    root = tk.Tk()
    app = EmployeeRejoin(root)
    root.mainloop()
